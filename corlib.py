#!/usr/bin/env python3
# --* encoding:utf8  *--
# -----------------------------------------------------------------------------
# corlib.py
# -----------------------------------------------------------------------------
''' cor outine library '''
from di import singleton, gsingleton

def print__():
	while True:
		x = yield
		print x

def wc(next = gsingleton(print__)):
	i=0
	while True:
		try:
			x = yield
		except StopIteration, e:
			next.send(i)
			i=0
		i += 1

# протокол общения корутин - 
# конец сообщения - брошеное  StopIteration
# корутина обязана обрабатывать StopIteration
# (при этом она сама может бросить StopIteration и часто это имеет смысл)  
# корутина не может (не должна) возвращать значение тому кто её вызвал
# корутина должна проверять не пришел ли к ней tuple 
# если к ней пришел вектор она должна предполагать, что 
# вместо потока она теперь обрабатывает граф
# узел графа обозначается одноэлементным вектором (x,)
# переход к наследникам текущего узла обозначается вложеным вектором
#  (x, ()) или (())
# конец наследников текущего узла обозначается (None)
# если граф имеет циклы, корутина может находить их сама
# исходя из представления, переданного по протоколу.
# если уграфа есть циклы, вызывающий корутину должен позаботиться, 
# чтобы хотя бы один из узлов передавался по ссылке 
# (более строго это должен быть объект класса, созданого пользователем)
# хотя передача графов с циклами это нетипичный случай
# большинство корутин модет не заботиться о циклах в графе

def greps(expression, next = gsingleton(print__))
	while True:
		try:
			x = yield
			if x.find(expression)!=-1:
				next.send(x)
		except StopIteration, e:
			next.throw(StopIteration())
			i=0
		i += 1
	